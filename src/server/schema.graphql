type Query {
  users: [User!]!
}

type Mutation {
  signup(
    email: String!
    password: String!
    name: String!
    birthday: String!
    maxAge: Int!
    minAge: Int!
    genderIdentity: Gender!
    genderPreference: Gender!
  ): AuthPayload
  login(email: String!, password: String!): AuthPayload
  addBlurb(text: String!): Blurb!
  addPic(url: String!): Pic!
  rate(blurbID: String, picID: String, score: Int!): Rating!
  giveFeedback(text: String!, ownerID: String!): Feedback!
  flagFeedback(id: ID!): Feedback!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String!
  password: String!
  blurbs: [Blurb!]!
  pics: [Pic!]!
  feedbackReceived: [Feedback!]!
  feedbackGiven: [Feedback!]!
  feedbackFlagged: [Feedback!]!
  birthday: String!
  maxAge: Int!
  minAge: Int!
  genderIdentity: Gender!
  genderPreference: Gender!
}

type Gender {
  id: ID!
  male: Boolean!
  female: Boolean!
  nonBi: Boolean!
  identityOwner: User
  preferenceOwner: User

type Blurb {
  id: ID!
  owner: User!
  text: String!
  ratings: [Rating!]!
}

type Pic {
  id: ID!
  owner: User!
  url: String!
  ratings: [Rating!]!
}

type Rating {
  id: ID!
  pic: Pic
  blurb: Blurb
  score: Int!
  ratingGiverAge: Int!
  ratingGiver: User!
  # copying the rating giver's age in this type because age will change over time
  # User gender is less likely to change, so its' ok to query it from the user
}

type Feedback {
  id: ID!
  text: String!
  createdAt: String!
  flagged: Boolean!
  flaggedBy: User
  feedbackReceiver: User!
  feedbackGiver: User!
}
