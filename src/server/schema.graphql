type Query {
  users: [User!]!
}

type Mutation {
  signup(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    birthday: String!
    maxAge: Int!
    minAge: Int!
    genderIdentityMale: Boolean!
    genderIdentityFemale: Boolean!
    genderIdentityNonBi: Boolean!
    genderPreferenceMale: Boolean!
    genderPreferenceFemale: Boolean!
    genderPreferenceNonBi: Boolean!
  ): AuthPayload
  login(email: String!, password: String!): AuthPayload
  addBlurb(text: String!): Blurb!
  addPic(url: String!): Pic!
  rate(blurbID: String, picID: String, score: Int!): Rating!
  giveFeedback(text: String!, ownerID: String!): Feedback!
  flagFeedback(id: ID!): Feedback!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  birthday: String!
  blurbs: [Blurb!]!
  email: String!
  feedbackFlagged: [Feedback!]!
  feedbackGiven: [Feedback!]!
  feedbackReceived: [Feedback!]!
  firstName: String
  genderIdentityMale: Boolean!
  genderIdentityFemale: Boolean!
  genderIdentityNonBi: Boolean!
  genderPreferenceMale: Boolean!
  genderPreferenceFemale: Boolean!
  genderPreferenceNonBi: Boolean!
  id: ID!
  lastName: String
  maxAge: Int!
  minAge: Int!
  password: String!
  pics: [Pic!]!
}

type Blurb {
  id: ID!
  owner: User!
  text: String!
  ratings: [Rating!]!
}

type Pic {
  id: ID!
  owner: User!
  url: String!
  ratings: [Rating!]!
}

type Rating {
  id: ID!
  pic: Pic
  blurb: Blurb
  score: Int!
  ratingGiverAge: Int!
  ratingGiver: User!
  # copying the rating giver's age in this type because age will change over time
  # User gender is less likely to change, so its' ok to query it from the user
}

type Feedback {
  id: ID!
  text: String!
  createdAt: String!
  flagged: Boolean!
  flaggedBy: User
  feedbackReceiver: User!
  feedbackGiver: User!
}
