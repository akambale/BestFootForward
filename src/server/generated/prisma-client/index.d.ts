// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  blurb: (where?: BlurbWhereInput) => Promise<boolean>;
  feedback: (where?: FeedbackWhereInput) => Promise<boolean>;
  pic: (where?: PicWhereInput) => Promise<boolean>;
  rating: (where?: RatingWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  blurb: (where: BlurbWhereUniqueInput) => BlurbNullablePromise;
  blurbs: (args?: {
    where?: BlurbWhereInput;
    orderBy?: BlurbOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Blurb>;
  blurbsConnection: (args?: {
    where?: BlurbWhereInput;
    orderBy?: BlurbOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BlurbConnectionPromise;
  feedback: (where: FeedbackWhereUniqueInput) => FeedbackNullablePromise;
  feedbacks: (args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Feedback>;
  feedbacksConnection: (args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FeedbackConnectionPromise;
  pic: (where: PicWhereUniqueInput) => PicNullablePromise;
  pics: (args?: {
    where?: PicWhereInput;
    orderBy?: PicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Pic>;
  picsConnection: (args?: {
    where?: PicWhereInput;
    orderBy?: PicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PicConnectionPromise;
  rating: (where: RatingWhereUniqueInput) => RatingNullablePromise;
  ratings: (args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Rating>;
  ratingsConnection: (args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RatingConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBlurb: (data: BlurbCreateInput) => BlurbPromise;
  updateBlurb: (args: {
    data: BlurbUpdateInput;
    where: BlurbWhereUniqueInput;
  }) => BlurbPromise;
  updateManyBlurbs: (args: {
    data: BlurbUpdateManyMutationInput;
    where?: BlurbWhereInput;
  }) => BatchPayloadPromise;
  upsertBlurb: (args: {
    where: BlurbWhereUniqueInput;
    create: BlurbCreateInput;
    update: BlurbUpdateInput;
  }) => BlurbPromise;
  deleteBlurb: (where: BlurbWhereUniqueInput) => BlurbPromise;
  deleteManyBlurbs: (where?: BlurbWhereInput) => BatchPayloadPromise;
  createFeedback: (data: FeedbackCreateInput) => FeedbackPromise;
  updateFeedback: (args: {
    data: FeedbackUpdateInput;
    where: FeedbackWhereUniqueInput;
  }) => FeedbackPromise;
  updateManyFeedbacks: (args: {
    data: FeedbackUpdateManyMutationInput;
    where?: FeedbackWhereInput;
  }) => BatchPayloadPromise;
  upsertFeedback: (args: {
    where: FeedbackWhereUniqueInput;
    create: FeedbackCreateInput;
    update: FeedbackUpdateInput;
  }) => FeedbackPromise;
  deleteFeedback: (where: FeedbackWhereUniqueInput) => FeedbackPromise;
  deleteManyFeedbacks: (where?: FeedbackWhereInput) => BatchPayloadPromise;
  createPic: (data: PicCreateInput) => PicPromise;
  updatePic: (args: {
    data: PicUpdateInput;
    where: PicWhereUniqueInput;
  }) => PicPromise;
  updateManyPics: (args: {
    data: PicUpdateManyMutationInput;
    where?: PicWhereInput;
  }) => BatchPayloadPromise;
  upsertPic: (args: {
    where: PicWhereUniqueInput;
    create: PicCreateInput;
    update: PicUpdateInput;
  }) => PicPromise;
  deletePic: (where: PicWhereUniqueInput) => PicPromise;
  deleteManyPics: (where?: PicWhereInput) => BatchPayloadPromise;
  createRating: (data: RatingCreateInput) => RatingPromise;
  updateRating: (args: {
    data: RatingUpdateInput;
    where: RatingWhereUniqueInput;
  }) => RatingPromise;
  updateManyRatings: (args: {
    data: RatingUpdateManyMutationInput;
    where?: RatingWhereInput;
  }) => BatchPayloadPromise;
  upsertRating: (args: {
    where: RatingWhereUniqueInput;
    create: RatingCreateInput;
    update: RatingUpdateInput;
  }) => RatingPromise;
  deleteRating: (where: RatingWhereUniqueInput) => RatingPromise;
  deleteManyRatings: (where?: RatingWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  blurb: (
    where?: BlurbSubscriptionWhereInput
  ) => BlurbSubscriptionPayloadSubscription;
  feedback: (
    where?: FeedbackSubscriptionWhereInput
  ) => FeedbackSubscriptionPayloadSubscription;
  pic: (
    where?: PicSubscriptionWhereInput
  ) => PicSubscriptionPayloadSubscription;
  rating: (
    where?: RatingSubscriptionWhereInput
  ) => RatingSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BlurbOrderByInput = "id_ASC" | "id_DESC" | "text_ASC" | "text_DESC";

export type PicOrderByInput = "id_ASC" | "id_DESC" | "url_ASC" | "url_DESC";

export type RatingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "score_ASC"
  | "score_DESC";

export type FeedbackOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "flagged_ASC"
  | "flagged_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "birthMonth_ASC"
  | "birthMonth_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BlurbWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BlurbWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  ratings_every?: Maybe<RatingWhereInput>;
  ratings_some?: Maybe<RatingWhereInput>;
  ratings_none?: Maybe<RatingWhereInput>;
  AND?: Maybe<BlurbWhereInput[] | BlurbWhereInput>;
  OR?: Maybe<BlurbWhereInput[] | BlurbWhereInput>;
  NOT?: Maybe<BlurbWhereInput[] | BlurbWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  birthMonth?: Maybe<String>;
  birthMonth_not?: Maybe<String>;
  birthMonth_in?: Maybe<String[] | String>;
  birthMonth_not_in?: Maybe<String[] | String>;
  birthMonth_lt?: Maybe<String>;
  birthMonth_lte?: Maybe<String>;
  birthMonth_gt?: Maybe<String>;
  birthMonth_gte?: Maybe<String>;
  birthMonth_contains?: Maybe<String>;
  birthMonth_not_contains?: Maybe<String>;
  birthMonth_starts_with?: Maybe<String>;
  birthMonth_not_starts_with?: Maybe<String>;
  birthMonth_ends_with?: Maybe<String>;
  birthMonth_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  blurbs_every?: Maybe<BlurbWhereInput>;
  blurbs_some?: Maybe<BlurbWhereInput>;
  blurbs_none?: Maybe<BlurbWhereInput>;
  pics_every?: Maybe<PicWhereInput>;
  pics_some?: Maybe<PicWhereInput>;
  pics_none?: Maybe<PicWhereInput>;
  feedbackReceived_every?: Maybe<FeedbackWhereInput>;
  feedbackReceived_some?: Maybe<FeedbackWhereInput>;
  feedbackReceived_none?: Maybe<FeedbackWhereInput>;
  feedbackGiven_every?: Maybe<FeedbackWhereInput>;
  feedbackGiven_some?: Maybe<FeedbackWhereInput>;
  feedbackGiven_none?: Maybe<FeedbackWhereInput>;
  feedbackFlaged_every?: Maybe<FeedbackWhereInput>;
  feedbackFlaged_some?: Maybe<FeedbackWhereInput>;
  feedbackFlaged_none?: Maybe<FeedbackWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface PicWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  ratings_every?: Maybe<RatingWhereInput>;
  ratings_some?: Maybe<RatingWhereInput>;
  ratings_none?: Maybe<RatingWhereInput>;
  AND?: Maybe<PicWhereInput[] | PicWhereInput>;
  OR?: Maybe<PicWhereInput[] | PicWhereInput>;
  NOT?: Maybe<PicWhereInput[] | PicWhereInput>;
}

export interface RatingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  pic?: Maybe<PicWhereInput>;
  blurb?: Maybe<BlurbWhereInput>;
  score?: Maybe<Int>;
  score_not?: Maybe<Int>;
  score_in?: Maybe<Int[] | Int>;
  score_not_in?: Maybe<Int[] | Int>;
  score_lt?: Maybe<Int>;
  score_lte?: Maybe<Int>;
  score_gt?: Maybe<Int>;
  score_gte?: Maybe<Int>;
  AND?: Maybe<RatingWhereInput[] | RatingWhereInput>;
  OR?: Maybe<RatingWhereInput[] | RatingWhereInput>;
  NOT?: Maybe<RatingWhereInput[] | RatingWhereInput>;
}

export interface FeedbackWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  flagged?: Maybe<Boolean>;
  flagged_not?: Maybe<Boolean>;
  flaggedBy?: Maybe<UserWhereInput>;
  feedbackReceiver?: Maybe<UserWhereInput>;
  feedbackGiver?: Maybe<UserWhereInput>;
  AND?: Maybe<FeedbackWhereInput[] | FeedbackWhereInput>;
  OR?: Maybe<FeedbackWhereInput[] | FeedbackWhereInput>;
  NOT?: Maybe<FeedbackWhereInput[] | FeedbackWhereInput>;
}

export type FeedbackWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PicWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RatingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface BlurbCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutBlurbsInput;
  text: String;
  ratings?: Maybe<RatingCreateManyWithoutBlurbInput>;
}

export interface UserCreateOneWithoutBlurbsInput {
  create?: Maybe<UserCreateWithoutBlurbsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutBlurbsInput {
  id?: Maybe<ID_Input>;
  name: String;
  birthMonth: String;
  email: String;
  password: String;
  pics?: Maybe<PicCreateManyWithoutOwnerInput>;
  feedbackReceived?: Maybe<FeedbackCreateManyWithoutFeedbackReceiverInput>;
  feedbackGiven?: Maybe<FeedbackCreateManyWithoutFeedbackGiverInput>;
  feedbackFlaged?: Maybe<FeedbackCreateManyWithoutFlaggedByInput>;
}

export interface PicCreateManyWithoutOwnerInput {
  create?: Maybe<PicCreateWithoutOwnerInput[] | PicCreateWithoutOwnerInput>;
  connect?: Maybe<PicWhereUniqueInput[] | PicWhereUniqueInput>;
}

export interface PicCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  url: String;
  ratings?: Maybe<RatingCreateManyWithoutPicInput>;
}

export interface RatingCreateManyWithoutPicInput {
  create?: Maybe<RatingCreateWithoutPicInput[] | RatingCreateWithoutPicInput>;
  connect?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
}

export interface RatingCreateWithoutPicInput {
  id?: Maybe<ID_Input>;
  blurb?: Maybe<BlurbCreateOneWithoutRatingsInput>;
  score: Int;
}

export interface BlurbCreateOneWithoutRatingsInput {
  create?: Maybe<BlurbCreateWithoutRatingsInput>;
  connect?: Maybe<BlurbWhereUniqueInput>;
}

export interface BlurbCreateWithoutRatingsInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutBlurbsInput;
  text: String;
}

export interface FeedbackCreateManyWithoutFeedbackReceiverInput {
  create?: Maybe<
    | FeedbackCreateWithoutFeedbackReceiverInput[]
    | FeedbackCreateWithoutFeedbackReceiverInput
  >;
  connect?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
}

export interface FeedbackCreateWithoutFeedbackReceiverInput {
  id?: Maybe<ID_Input>;
  text: String;
  flagged: Boolean;
  flaggedBy?: Maybe<UserCreateOneWithoutFeedbackFlagedInput>;
  feedbackGiver: UserCreateOneWithoutFeedbackGivenInput;
}

export interface UserCreateOneWithoutFeedbackFlagedInput {
  create?: Maybe<UserCreateWithoutFeedbackFlagedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutFeedbackFlagedInput {
  id?: Maybe<ID_Input>;
  name: String;
  birthMonth: String;
  email: String;
  password: String;
  blurbs?: Maybe<BlurbCreateManyWithoutOwnerInput>;
  pics?: Maybe<PicCreateManyWithoutOwnerInput>;
  feedbackReceived?: Maybe<FeedbackCreateManyWithoutFeedbackReceiverInput>;
  feedbackGiven?: Maybe<FeedbackCreateManyWithoutFeedbackGiverInput>;
}

export interface BlurbCreateManyWithoutOwnerInput {
  create?: Maybe<BlurbCreateWithoutOwnerInput[] | BlurbCreateWithoutOwnerInput>;
  connect?: Maybe<BlurbWhereUniqueInput[] | BlurbWhereUniqueInput>;
}

export interface BlurbCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  text: String;
  ratings?: Maybe<RatingCreateManyWithoutBlurbInput>;
}

export interface RatingCreateManyWithoutBlurbInput {
  create?: Maybe<
    RatingCreateWithoutBlurbInput[] | RatingCreateWithoutBlurbInput
  >;
  connect?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
}

export interface RatingCreateWithoutBlurbInput {
  id?: Maybe<ID_Input>;
  pic?: Maybe<PicCreateOneWithoutRatingsInput>;
  score: Int;
}

export interface PicCreateOneWithoutRatingsInput {
  create?: Maybe<PicCreateWithoutRatingsInput>;
  connect?: Maybe<PicWhereUniqueInput>;
}

export interface PicCreateWithoutRatingsInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutPicsInput;
  url: String;
}

export interface UserCreateOneWithoutPicsInput {
  create?: Maybe<UserCreateWithoutPicsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPicsInput {
  id?: Maybe<ID_Input>;
  name: String;
  birthMonth: String;
  email: String;
  password: String;
  blurbs?: Maybe<BlurbCreateManyWithoutOwnerInput>;
  feedbackReceived?: Maybe<FeedbackCreateManyWithoutFeedbackReceiverInput>;
  feedbackGiven?: Maybe<FeedbackCreateManyWithoutFeedbackGiverInput>;
  feedbackFlaged?: Maybe<FeedbackCreateManyWithoutFlaggedByInput>;
}

export interface FeedbackCreateManyWithoutFeedbackGiverInput {
  create?: Maybe<
    | FeedbackCreateWithoutFeedbackGiverInput[]
    | FeedbackCreateWithoutFeedbackGiverInput
  >;
  connect?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
}

export interface FeedbackCreateWithoutFeedbackGiverInput {
  id?: Maybe<ID_Input>;
  text: String;
  flagged: Boolean;
  flaggedBy?: Maybe<UserCreateOneWithoutFeedbackFlagedInput>;
  feedbackReceiver: UserCreateOneWithoutFeedbackReceivedInput;
}

export interface UserCreateOneWithoutFeedbackReceivedInput {
  create?: Maybe<UserCreateWithoutFeedbackReceivedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutFeedbackReceivedInput {
  id?: Maybe<ID_Input>;
  name: String;
  birthMonth: String;
  email: String;
  password: String;
  blurbs?: Maybe<BlurbCreateManyWithoutOwnerInput>;
  pics?: Maybe<PicCreateManyWithoutOwnerInput>;
  feedbackGiven?: Maybe<FeedbackCreateManyWithoutFeedbackGiverInput>;
  feedbackFlaged?: Maybe<FeedbackCreateManyWithoutFlaggedByInput>;
}

export interface FeedbackCreateManyWithoutFlaggedByInput {
  create?: Maybe<
    FeedbackCreateWithoutFlaggedByInput[] | FeedbackCreateWithoutFlaggedByInput
  >;
  connect?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
}

export interface FeedbackCreateWithoutFlaggedByInput {
  id?: Maybe<ID_Input>;
  text: String;
  flagged: Boolean;
  feedbackReceiver: UserCreateOneWithoutFeedbackReceivedInput;
  feedbackGiver: UserCreateOneWithoutFeedbackGivenInput;
}

export interface UserCreateOneWithoutFeedbackGivenInput {
  create?: Maybe<UserCreateWithoutFeedbackGivenInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutFeedbackGivenInput {
  id?: Maybe<ID_Input>;
  name: String;
  birthMonth: String;
  email: String;
  password: String;
  blurbs?: Maybe<BlurbCreateManyWithoutOwnerInput>;
  pics?: Maybe<PicCreateManyWithoutOwnerInput>;
  feedbackReceived?: Maybe<FeedbackCreateManyWithoutFeedbackReceiverInput>;
  feedbackFlaged?: Maybe<FeedbackCreateManyWithoutFlaggedByInput>;
}

export interface BlurbUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutBlurbsInput>;
  text?: Maybe<String>;
  ratings?: Maybe<RatingUpdateManyWithoutBlurbInput>;
}

export interface UserUpdateOneRequiredWithoutBlurbsInput {
  create?: Maybe<UserCreateWithoutBlurbsInput>;
  update?: Maybe<UserUpdateWithoutBlurbsDataInput>;
  upsert?: Maybe<UserUpsertWithoutBlurbsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutBlurbsDataInput {
  name?: Maybe<String>;
  birthMonth?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  pics?: Maybe<PicUpdateManyWithoutOwnerInput>;
  feedbackReceived?: Maybe<FeedbackUpdateManyWithoutFeedbackReceiverInput>;
  feedbackGiven?: Maybe<FeedbackUpdateManyWithoutFeedbackGiverInput>;
  feedbackFlaged?: Maybe<FeedbackUpdateManyWithoutFlaggedByInput>;
}

export interface PicUpdateManyWithoutOwnerInput {
  create?: Maybe<PicCreateWithoutOwnerInput[] | PicCreateWithoutOwnerInput>;
  delete?: Maybe<PicWhereUniqueInput[] | PicWhereUniqueInput>;
  connect?: Maybe<PicWhereUniqueInput[] | PicWhereUniqueInput>;
  set?: Maybe<PicWhereUniqueInput[] | PicWhereUniqueInput>;
  disconnect?: Maybe<PicWhereUniqueInput[] | PicWhereUniqueInput>;
  update?: Maybe<
    | PicUpdateWithWhereUniqueWithoutOwnerInput[]
    | PicUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | PicUpsertWithWhereUniqueWithoutOwnerInput[]
    | PicUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<PicScalarWhereInput[] | PicScalarWhereInput>;
  updateMany?: Maybe<
    PicUpdateManyWithWhereNestedInput[] | PicUpdateManyWithWhereNestedInput
  >;
}

export interface PicUpdateWithWhereUniqueWithoutOwnerInput {
  where: PicWhereUniqueInput;
  data: PicUpdateWithoutOwnerDataInput;
}

export interface PicUpdateWithoutOwnerDataInput {
  url?: Maybe<String>;
  ratings?: Maybe<RatingUpdateManyWithoutPicInput>;
}

export interface RatingUpdateManyWithoutPicInput {
  create?: Maybe<RatingCreateWithoutPicInput[] | RatingCreateWithoutPicInput>;
  delete?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  connect?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  set?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  disconnect?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  update?: Maybe<
    | RatingUpdateWithWhereUniqueWithoutPicInput[]
    | RatingUpdateWithWhereUniqueWithoutPicInput
  >;
  upsert?: Maybe<
    | RatingUpsertWithWhereUniqueWithoutPicInput[]
    | RatingUpsertWithWhereUniqueWithoutPicInput
  >;
  deleteMany?: Maybe<RatingScalarWhereInput[] | RatingScalarWhereInput>;
  updateMany?: Maybe<
    | RatingUpdateManyWithWhereNestedInput[]
    | RatingUpdateManyWithWhereNestedInput
  >;
}

export interface RatingUpdateWithWhereUniqueWithoutPicInput {
  where: RatingWhereUniqueInput;
  data: RatingUpdateWithoutPicDataInput;
}

export interface RatingUpdateWithoutPicDataInput {
  blurb?: Maybe<BlurbUpdateOneWithoutRatingsInput>;
  score?: Maybe<Int>;
}

export interface BlurbUpdateOneWithoutRatingsInput {
  create?: Maybe<BlurbCreateWithoutRatingsInput>;
  update?: Maybe<BlurbUpdateWithoutRatingsDataInput>;
  upsert?: Maybe<BlurbUpsertWithoutRatingsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<BlurbWhereUniqueInput>;
}

export interface BlurbUpdateWithoutRatingsDataInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutBlurbsInput>;
  text?: Maybe<String>;
}

export interface BlurbUpsertWithoutRatingsInput {
  update: BlurbUpdateWithoutRatingsDataInput;
  create: BlurbCreateWithoutRatingsInput;
}

export interface RatingUpsertWithWhereUniqueWithoutPicInput {
  where: RatingWhereUniqueInput;
  update: RatingUpdateWithoutPicDataInput;
  create: RatingCreateWithoutPicInput;
}

export interface RatingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  score?: Maybe<Int>;
  score_not?: Maybe<Int>;
  score_in?: Maybe<Int[] | Int>;
  score_not_in?: Maybe<Int[] | Int>;
  score_lt?: Maybe<Int>;
  score_lte?: Maybe<Int>;
  score_gt?: Maybe<Int>;
  score_gte?: Maybe<Int>;
  AND?: Maybe<RatingScalarWhereInput[] | RatingScalarWhereInput>;
  OR?: Maybe<RatingScalarWhereInput[] | RatingScalarWhereInput>;
  NOT?: Maybe<RatingScalarWhereInput[] | RatingScalarWhereInput>;
}

export interface RatingUpdateManyWithWhereNestedInput {
  where: RatingScalarWhereInput;
  data: RatingUpdateManyDataInput;
}

export interface RatingUpdateManyDataInput {
  score?: Maybe<Int>;
}

export interface PicUpsertWithWhereUniqueWithoutOwnerInput {
  where: PicWhereUniqueInput;
  update: PicUpdateWithoutOwnerDataInput;
  create: PicCreateWithoutOwnerInput;
}

export interface PicScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<PicScalarWhereInput[] | PicScalarWhereInput>;
  OR?: Maybe<PicScalarWhereInput[] | PicScalarWhereInput>;
  NOT?: Maybe<PicScalarWhereInput[] | PicScalarWhereInput>;
}

export interface PicUpdateManyWithWhereNestedInput {
  where: PicScalarWhereInput;
  data: PicUpdateManyDataInput;
}

export interface PicUpdateManyDataInput {
  url?: Maybe<String>;
}

export interface FeedbackUpdateManyWithoutFeedbackReceiverInput {
  create?: Maybe<
    | FeedbackCreateWithoutFeedbackReceiverInput[]
    | FeedbackCreateWithoutFeedbackReceiverInput
  >;
  delete?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
  connect?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
  set?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
  disconnect?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
  update?: Maybe<
    | FeedbackUpdateWithWhereUniqueWithoutFeedbackReceiverInput[]
    | FeedbackUpdateWithWhereUniqueWithoutFeedbackReceiverInput
  >;
  upsert?: Maybe<
    | FeedbackUpsertWithWhereUniqueWithoutFeedbackReceiverInput[]
    | FeedbackUpsertWithWhereUniqueWithoutFeedbackReceiverInput
  >;
  deleteMany?: Maybe<FeedbackScalarWhereInput[] | FeedbackScalarWhereInput>;
  updateMany?: Maybe<
    | FeedbackUpdateManyWithWhereNestedInput[]
    | FeedbackUpdateManyWithWhereNestedInput
  >;
}

export interface FeedbackUpdateWithWhereUniqueWithoutFeedbackReceiverInput {
  where: FeedbackWhereUniqueInput;
  data: FeedbackUpdateWithoutFeedbackReceiverDataInput;
}

export interface FeedbackUpdateWithoutFeedbackReceiverDataInput {
  text?: Maybe<String>;
  flagged?: Maybe<Boolean>;
  flaggedBy?: Maybe<UserUpdateOneWithoutFeedbackFlagedInput>;
  feedbackGiver?: Maybe<UserUpdateOneRequiredWithoutFeedbackGivenInput>;
}

export interface UserUpdateOneWithoutFeedbackFlagedInput {
  create?: Maybe<UserCreateWithoutFeedbackFlagedInput>;
  update?: Maybe<UserUpdateWithoutFeedbackFlagedDataInput>;
  upsert?: Maybe<UserUpsertWithoutFeedbackFlagedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutFeedbackFlagedDataInput {
  name?: Maybe<String>;
  birthMonth?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  blurbs?: Maybe<BlurbUpdateManyWithoutOwnerInput>;
  pics?: Maybe<PicUpdateManyWithoutOwnerInput>;
  feedbackReceived?: Maybe<FeedbackUpdateManyWithoutFeedbackReceiverInput>;
  feedbackGiven?: Maybe<FeedbackUpdateManyWithoutFeedbackGiverInput>;
}

export interface BlurbUpdateManyWithoutOwnerInput {
  create?: Maybe<BlurbCreateWithoutOwnerInput[] | BlurbCreateWithoutOwnerInput>;
  delete?: Maybe<BlurbWhereUniqueInput[] | BlurbWhereUniqueInput>;
  connect?: Maybe<BlurbWhereUniqueInput[] | BlurbWhereUniqueInput>;
  set?: Maybe<BlurbWhereUniqueInput[] | BlurbWhereUniqueInput>;
  disconnect?: Maybe<BlurbWhereUniqueInput[] | BlurbWhereUniqueInput>;
  update?: Maybe<
    | BlurbUpdateWithWhereUniqueWithoutOwnerInput[]
    | BlurbUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | BlurbUpsertWithWhereUniqueWithoutOwnerInput[]
    | BlurbUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<BlurbScalarWhereInput[] | BlurbScalarWhereInput>;
  updateMany?: Maybe<
    BlurbUpdateManyWithWhereNestedInput[] | BlurbUpdateManyWithWhereNestedInput
  >;
}

export interface BlurbUpdateWithWhereUniqueWithoutOwnerInput {
  where: BlurbWhereUniqueInput;
  data: BlurbUpdateWithoutOwnerDataInput;
}

export interface BlurbUpdateWithoutOwnerDataInput {
  text?: Maybe<String>;
  ratings?: Maybe<RatingUpdateManyWithoutBlurbInput>;
}

export interface RatingUpdateManyWithoutBlurbInput {
  create?: Maybe<
    RatingCreateWithoutBlurbInput[] | RatingCreateWithoutBlurbInput
  >;
  delete?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  connect?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  set?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  disconnect?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  update?: Maybe<
    | RatingUpdateWithWhereUniqueWithoutBlurbInput[]
    | RatingUpdateWithWhereUniqueWithoutBlurbInput
  >;
  upsert?: Maybe<
    | RatingUpsertWithWhereUniqueWithoutBlurbInput[]
    | RatingUpsertWithWhereUniqueWithoutBlurbInput
  >;
  deleteMany?: Maybe<RatingScalarWhereInput[] | RatingScalarWhereInput>;
  updateMany?: Maybe<
    | RatingUpdateManyWithWhereNestedInput[]
    | RatingUpdateManyWithWhereNestedInput
  >;
}

export interface RatingUpdateWithWhereUniqueWithoutBlurbInput {
  where: RatingWhereUniqueInput;
  data: RatingUpdateWithoutBlurbDataInput;
}

export interface RatingUpdateWithoutBlurbDataInput {
  pic?: Maybe<PicUpdateOneWithoutRatingsInput>;
  score?: Maybe<Int>;
}

export interface PicUpdateOneWithoutRatingsInput {
  create?: Maybe<PicCreateWithoutRatingsInput>;
  update?: Maybe<PicUpdateWithoutRatingsDataInput>;
  upsert?: Maybe<PicUpsertWithoutRatingsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PicWhereUniqueInput>;
}

export interface PicUpdateWithoutRatingsDataInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutPicsInput>;
  url?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutPicsInput {
  create?: Maybe<UserCreateWithoutPicsInput>;
  update?: Maybe<UserUpdateWithoutPicsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPicsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPicsDataInput {
  name?: Maybe<String>;
  birthMonth?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  blurbs?: Maybe<BlurbUpdateManyWithoutOwnerInput>;
  feedbackReceived?: Maybe<FeedbackUpdateManyWithoutFeedbackReceiverInput>;
  feedbackGiven?: Maybe<FeedbackUpdateManyWithoutFeedbackGiverInput>;
  feedbackFlaged?: Maybe<FeedbackUpdateManyWithoutFlaggedByInput>;
}

export interface FeedbackUpdateManyWithoutFeedbackGiverInput {
  create?: Maybe<
    | FeedbackCreateWithoutFeedbackGiverInput[]
    | FeedbackCreateWithoutFeedbackGiverInput
  >;
  delete?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
  connect?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
  set?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
  disconnect?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
  update?: Maybe<
    | FeedbackUpdateWithWhereUniqueWithoutFeedbackGiverInput[]
    | FeedbackUpdateWithWhereUniqueWithoutFeedbackGiverInput
  >;
  upsert?: Maybe<
    | FeedbackUpsertWithWhereUniqueWithoutFeedbackGiverInput[]
    | FeedbackUpsertWithWhereUniqueWithoutFeedbackGiverInput
  >;
  deleteMany?: Maybe<FeedbackScalarWhereInput[] | FeedbackScalarWhereInput>;
  updateMany?: Maybe<
    | FeedbackUpdateManyWithWhereNestedInput[]
    | FeedbackUpdateManyWithWhereNestedInput
  >;
}

export interface FeedbackUpdateWithWhereUniqueWithoutFeedbackGiverInput {
  where: FeedbackWhereUniqueInput;
  data: FeedbackUpdateWithoutFeedbackGiverDataInput;
}

export interface FeedbackUpdateWithoutFeedbackGiverDataInput {
  text?: Maybe<String>;
  flagged?: Maybe<Boolean>;
  flaggedBy?: Maybe<UserUpdateOneWithoutFeedbackFlagedInput>;
  feedbackReceiver?: Maybe<UserUpdateOneRequiredWithoutFeedbackReceivedInput>;
}

export interface UserUpdateOneRequiredWithoutFeedbackReceivedInput {
  create?: Maybe<UserCreateWithoutFeedbackReceivedInput>;
  update?: Maybe<UserUpdateWithoutFeedbackReceivedDataInput>;
  upsert?: Maybe<UserUpsertWithoutFeedbackReceivedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutFeedbackReceivedDataInput {
  name?: Maybe<String>;
  birthMonth?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  blurbs?: Maybe<BlurbUpdateManyWithoutOwnerInput>;
  pics?: Maybe<PicUpdateManyWithoutOwnerInput>;
  feedbackGiven?: Maybe<FeedbackUpdateManyWithoutFeedbackGiverInput>;
  feedbackFlaged?: Maybe<FeedbackUpdateManyWithoutFlaggedByInput>;
}

export interface FeedbackUpdateManyWithoutFlaggedByInput {
  create?: Maybe<
    FeedbackCreateWithoutFlaggedByInput[] | FeedbackCreateWithoutFlaggedByInput
  >;
  delete?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
  connect?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
  set?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
  disconnect?: Maybe<FeedbackWhereUniqueInput[] | FeedbackWhereUniqueInput>;
  update?: Maybe<
    | FeedbackUpdateWithWhereUniqueWithoutFlaggedByInput[]
    | FeedbackUpdateWithWhereUniqueWithoutFlaggedByInput
  >;
  upsert?: Maybe<
    | FeedbackUpsertWithWhereUniqueWithoutFlaggedByInput[]
    | FeedbackUpsertWithWhereUniqueWithoutFlaggedByInput
  >;
  deleteMany?: Maybe<FeedbackScalarWhereInput[] | FeedbackScalarWhereInput>;
  updateMany?: Maybe<
    | FeedbackUpdateManyWithWhereNestedInput[]
    | FeedbackUpdateManyWithWhereNestedInput
  >;
}

export interface FeedbackUpdateWithWhereUniqueWithoutFlaggedByInput {
  where: FeedbackWhereUniqueInput;
  data: FeedbackUpdateWithoutFlaggedByDataInput;
}

export interface FeedbackUpdateWithoutFlaggedByDataInput {
  text?: Maybe<String>;
  flagged?: Maybe<Boolean>;
  feedbackReceiver?: Maybe<UserUpdateOneRequiredWithoutFeedbackReceivedInput>;
  feedbackGiver?: Maybe<UserUpdateOneRequiredWithoutFeedbackGivenInput>;
}

export interface UserUpdateOneRequiredWithoutFeedbackGivenInput {
  create?: Maybe<UserCreateWithoutFeedbackGivenInput>;
  update?: Maybe<UserUpdateWithoutFeedbackGivenDataInput>;
  upsert?: Maybe<UserUpsertWithoutFeedbackGivenInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutFeedbackGivenDataInput {
  name?: Maybe<String>;
  birthMonth?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  blurbs?: Maybe<BlurbUpdateManyWithoutOwnerInput>;
  pics?: Maybe<PicUpdateManyWithoutOwnerInput>;
  feedbackReceived?: Maybe<FeedbackUpdateManyWithoutFeedbackReceiverInput>;
  feedbackFlaged?: Maybe<FeedbackUpdateManyWithoutFlaggedByInput>;
}

export interface UserUpsertWithoutFeedbackGivenInput {
  update: UserUpdateWithoutFeedbackGivenDataInput;
  create: UserCreateWithoutFeedbackGivenInput;
}

export interface FeedbackUpsertWithWhereUniqueWithoutFlaggedByInput {
  where: FeedbackWhereUniqueInput;
  update: FeedbackUpdateWithoutFlaggedByDataInput;
  create: FeedbackCreateWithoutFlaggedByInput;
}

export interface FeedbackScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  flagged?: Maybe<Boolean>;
  flagged_not?: Maybe<Boolean>;
  AND?: Maybe<FeedbackScalarWhereInput[] | FeedbackScalarWhereInput>;
  OR?: Maybe<FeedbackScalarWhereInput[] | FeedbackScalarWhereInput>;
  NOT?: Maybe<FeedbackScalarWhereInput[] | FeedbackScalarWhereInput>;
}

export interface FeedbackUpdateManyWithWhereNestedInput {
  where: FeedbackScalarWhereInput;
  data: FeedbackUpdateManyDataInput;
}

export interface FeedbackUpdateManyDataInput {
  text?: Maybe<String>;
  flagged?: Maybe<Boolean>;
}

export interface UserUpsertWithoutFeedbackReceivedInput {
  update: UserUpdateWithoutFeedbackReceivedDataInput;
  create: UserCreateWithoutFeedbackReceivedInput;
}

export interface FeedbackUpsertWithWhereUniqueWithoutFeedbackGiverInput {
  where: FeedbackWhereUniqueInput;
  update: FeedbackUpdateWithoutFeedbackGiverDataInput;
  create: FeedbackCreateWithoutFeedbackGiverInput;
}

export interface UserUpsertWithoutPicsInput {
  update: UserUpdateWithoutPicsDataInput;
  create: UserCreateWithoutPicsInput;
}

export interface PicUpsertWithoutRatingsInput {
  update: PicUpdateWithoutRatingsDataInput;
  create: PicCreateWithoutRatingsInput;
}

export interface RatingUpsertWithWhereUniqueWithoutBlurbInput {
  where: RatingWhereUniqueInput;
  update: RatingUpdateWithoutBlurbDataInput;
  create: RatingCreateWithoutBlurbInput;
}

export interface BlurbUpsertWithWhereUniqueWithoutOwnerInput {
  where: BlurbWhereUniqueInput;
  update: BlurbUpdateWithoutOwnerDataInput;
  create: BlurbCreateWithoutOwnerInput;
}

export interface BlurbScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  AND?: Maybe<BlurbScalarWhereInput[] | BlurbScalarWhereInput>;
  OR?: Maybe<BlurbScalarWhereInput[] | BlurbScalarWhereInput>;
  NOT?: Maybe<BlurbScalarWhereInput[] | BlurbScalarWhereInput>;
}

export interface BlurbUpdateManyWithWhereNestedInput {
  where: BlurbScalarWhereInput;
  data: BlurbUpdateManyDataInput;
}

export interface BlurbUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface UserUpsertWithoutFeedbackFlagedInput {
  update: UserUpdateWithoutFeedbackFlagedDataInput;
  create: UserCreateWithoutFeedbackFlagedInput;
}

export interface FeedbackUpsertWithWhereUniqueWithoutFeedbackReceiverInput {
  where: FeedbackWhereUniqueInput;
  update: FeedbackUpdateWithoutFeedbackReceiverDataInput;
  create: FeedbackCreateWithoutFeedbackReceiverInput;
}

export interface UserUpsertWithoutBlurbsInput {
  update: UserUpdateWithoutBlurbsDataInput;
  create: UserCreateWithoutBlurbsInput;
}

export interface BlurbUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface FeedbackCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  flagged: Boolean;
  flaggedBy?: Maybe<UserCreateOneWithoutFeedbackFlagedInput>;
  feedbackReceiver: UserCreateOneWithoutFeedbackReceivedInput;
  feedbackGiver: UserCreateOneWithoutFeedbackGivenInput;
}

export interface FeedbackUpdateInput {
  text?: Maybe<String>;
  flagged?: Maybe<Boolean>;
  flaggedBy?: Maybe<UserUpdateOneWithoutFeedbackFlagedInput>;
  feedbackReceiver?: Maybe<UserUpdateOneRequiredWithoutFeedbackReceivedInput>;
  feedbackGiver?: Maybe<UserUpdateOneRequiredWithoutFeedbackGivenInput>;
}

export interface FeedbackUpdateManyMutationInput {
  text?: Maybe<String>;
  flagged?: Maybe<Boolean>;
}

export interface PicCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutPicsInput;
  url: String;
  ratings?: Maybe<RatingCreateManyWithoutPicInput>;
}

export interface PicUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutPicsInput>;
  url?: Maybe<String>;
  ratings?: Maybe<RatingUpdateManyWithoutPicInput>;
}

export interface PicUpdateManyMutationInput {
  url?: Maybe<String>;
}

export interface RatingCreateInput {
  id?: Maybe<ID_Input>;
  pic?: Maybe<PicCreateOneWithoutRatingsInput>;
  blurb?: Maybe<BlurbCreateOneWithoutRatingsInput>;
  score: Int;
}

export interface RatingUpdateInput {
  pic?: Maybe<PicUpdateOneWithoutRatingsInput>;
  blurb?: Maybe<BlurbUpdateOneWithoutRatingsInput>;
  score?: Maybe<Int>;
}

export interface RatingUpdateManyMutationInput {
  score?: Maybe<Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  birthMonth: String;
  email: String;
  password: String;
  blurbs?: Maybe<BlurbCreateManyWithoutOwnerInput>;
  pics?: Maybe<PicCreateManyWithoutOwnerInput>;
  feedbackReceived?: Maybe<FeedbackCreateManyWithoutFeedbackReceiverInput>;
  feedbackGiven?: Maybe<FeedbackCreateManyWithoutFeedbackGiverInput>;
  feedbackFlaged?: Maybe<FeedbackCreateManyWithoutFlaggedByInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  birthMonth?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  blurbs?: Maybe<BlurbUpdateManyWithoutOwnerInput>;
  pics?: Maybe<PicUpdateManyWithoutOwnerInput>;
  feedbackReceived?: Maybe<FeedbackUpdateManyWithoutFeedbackReceiverInput>;
  feedbackGiven?: Maybe<FeedbackUpdateManyWithoutFeedbackGiverInput>;
  feedbackFlaged?: Maybe<FeedbackUpdateManyWithoutFlaggedByInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  birthMonth?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface BlurbSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BlurbWhereInput>;
  AND?: Maybe<BlurbSubscriptionWhereInput[] | BlurbSubscriptionWhereInput>;
  OR?: Maybe<BlurbSubscriptionWhereInput[] | BlurbSubscriptionWhereInput>;
  NOT?: Maybe<BlurbSubscriptionWhereInput[] | BlurbSubscriptionWhereInput>;
}

export interface FeedbackSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FeedbackWhereInput>;
  AND?: Maybe<
    FeedbackSubscriptionWhereInput[] | FeedbackSubscriptionWhereInput
  >;
  OR?: Maybe<FeedbackSubscriptionWhereInput[] | FeedbackSubscriptionWhereInput>;
  NOT?: Maybe<
    FeedbackSubscriptionWhereInput[] | FeedbackSubscriptionWhereInput
  >;
}

export interface PicSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PicWhereInput>;
  AND?: Maybe<PicSubscriptionWhereInput[] | PicSubscriptionWhereInput>;
  OR?: Maybe<PicSubscriptionWhereInput[] | PicSubscriptionWhereInput>;
  NOT?: Maybe<PicSubscriptionWhereInput[] | PicSubscriptionWhereInput>;
}

export interface RatingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RatingWhereInput>;
  AND?: Maybe<RatingSubscriptionWhereInput[] | RatingSubscriptionWhereInput>;
  OR?: Maybe<RatingSubscriptionWhereInput[] | RatingSubscriptionWhereInput>;
  NOT?: Maybe<RatingSubscriptionWhereInput[] | RatingSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Blurb {
  id: ID_Output;
  text: String;
}

export interface BlurbPromise extends Promise<Blurb>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  text: () => Promise<String>;
  ratings: <T = FragmentableArray<Rating>>(args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BlurbSubscription
  extends Promise<AsyncIterator<Blurb>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
  ratings: <T = Promise<AsyncIterator<RatingSubscription>>>(args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BlurbNullablePromise
  extends Promise<Blurb | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  text: () => Promise<String>;
  ratings: <T = FragmentableArray<Rating>>(args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  name: String;
  birthMonth: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  birthMonth: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  blurbs: <T = FragmentableArray<Blurb>>(args?: {
    where?: BlurbWhereInput;
    orderBy?: BlurbOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pics: <T = FragmentableArray<Pic>>(args?: {
    where?: PicWhereInput;
    orderBy?: PicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  feedbackReceived: <T = FragmentableArray<Feedback>>(args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  feedbackGiven: <T = FragmentableArray<Feedback>>(args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  feedbackFlaged: <T = FragmentableArray<Feedback>>(args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  birthMonth: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  blurbs: <T = Promise<AsyncIterator<BlurbSubscription>>>(args?: {
    where?: BlurbWhereInput;
    orderBy?: BlurbOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pics: <T = Promise<AsyncIterator<PicSubscription>>>(args?: {
    where?: PicWhereInput;
    orderBy?: PicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  feedbackReceived: <T = Promise<AsyncIterator<FeedbackSubscription>>>(args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  feedbackGiven: <T = Promise<AsyncIterator<FeedbackSubscription>>>(args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  feedbackFlaged: <T = Promise<AsyncIterator<FeedbackSubscription>>>(args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  birthMonth: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  blurbs: <T = FragmentableArray<Blurb>>(args?: {
    where?: BlurbWhereInput;
    orderBy?: BlurbOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pics: <T = FragmentableArray<Pic>>(args?: {
    where?: PicWhereInput;
    orderBy?: PicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  feedbackReceived: <T = FragmentableArray<Feedback>>(args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  feedbackGiven: <T = FragmentableArray<Feedback>>(args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  feedbackFlaged: <T = FragmentableArray<Feedback>>(args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Pic {
  id: ID_Output;
  url: String;
}

export interface PicPromise extends Promise<Pic>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  url: () => Promise<String>;
  ratings: <T = FragmentableArray<Rating>>(args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PicSubscription
  extends Promise<AsyncIterator<Pic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  url: () => Promise<AsyncIterator<String>>;
  ratings: <T = Promise<AsyncIterator<RatingSubscription>>>(args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PicNullablePromise extends Promise<Pic | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  url: () => Promise<String>;
  ratings: <T = FragmentableArray<Rating>>(args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Rating {
  id: ID_Output;
  score: Int;
}

export interface RatingPromise extends Promise<Rating>, Fragmentable {
  id: () => Promise<ID_Output>;
  pic: <T = PicPromise>() => T;
  blurb: <T = BlurbPromise>() => T;
  score: () => Promise<Int>;
}

export interface RatingSubscription
  extends Promise<AsyncIterator<Rating>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  pic: <T = PicSubscription>() => T;
  blurb: <T = BlurbSubscription>() => T;
  score: () => Promise<AsyncIterator<Int>>;
}

export interface RatingNullablePromise
  extends Promise<Rating | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  pic: <T = PicPromise>() => T;
  blurb: <T = BlurbPromise>() => T;
  score: () => Promise<Int>;
}

export interface Feedback {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  flagged: Boolean;
}

export interface FeedbackPromise extends Promise<Feedback>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  flagged: () => Promise<Boolean>;
  flaggedBy: <T = UserPromise>() => T;
  feedbackReceiver: <T = UserPromise>() => T;
  feedbackGiver: <T = UserPromise>() => T;
}

export interface FeedbackSubscription
  extends Promise<AsyncIterator<Feedback>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  flagged: () => Promise<AsyncIterator<Boolean>>;
  flaggedBy: <T = UserSubscription>() => T;
  feedbackReceiver: <T = UserSubscription>() => T;
  feedbackGiver: <T = UserSubscription>() => T;
}

export interface FeedbackNullablePromise
  extends Promise<Feedback | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  flagged: () => Promise<Boolean>;
  flaggedBy: <T = UserPromise>() => T;
  feedbackReceiver: <T = UserPromise>() => T;
  feedbackGiver: <T = UserPromise>() => T;
}

export interface BlurbConnection {
  pageInfo: PageInfo;
  edges: BlurbEdge[];
}

export interface BlurbConnectionPromise
  extends Promise<BlurbConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BlurbEdge>>() => T;
  aggregate: <T = AggregateBlurbPromise>() => T;
}

export interface BlurbConnectionSubscription
  extends Promise<AsyncIterator<BlurbConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BlurbEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBlurbSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BlurbEdge {
  node: Blurb;
  cursor: String;
}

export interface BlurbEdgePromise extends Promise<BlurbEdge>, Fragmentable {
  node: <T = BlurbPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BlurbEdgeSubscription
  extends Promise<AsyncIterator<BlurbEdge>>,
    Fragmentable {
  node: <T = BlurbSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBlurb {
  count: Int;
}

export interface AggregateBlurbPromise
  extends Promise<AggregateBlurb>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBlurbSubscription
  extends Promise<AsyncIterator<AggregateBlurb>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FeedbackConnection {
  pageInfo: PageInfo;
  edges: FeedbackEdge[];
}

export interface FeedbackConnectionPromise
  extends Promise<FeedbackConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FeedbackEdge>>() => T;
  aggregate: <T = AggregateFeedbackPromise>() => T;
}

export interface FeedbackConnectionSubscription
  extends Promise<AsyncIterator<FeedbackConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FeedbackEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFeedbackSubscription>() => T;
}

export interface FeedbackEdge {
  node: Feedback;
  cursor: String;
}

export interface FeedbackEdgePromise
  extends Promise<FeedbackEdge>,
    Fragmentable {
  node: <T = FeedbackPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FeedbackEdgeSubscription
  extends Promise<AsyncIterator<FeedbackEdge>>,
    Fragmentable {
  node: <T = FeedbackSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFeedback {
  count: Int;
}

export interface AggregateFeedbackPromise
  extends Promise<AggregateFeedback>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFeedbackSubscription
  extends Promise<AsyncIterator<AggregateFeedback>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PicConnection {
  pageInfo: PageInfo;
  edges: PicEdge[];
}

export interface PicConnectionPromise
  extends Promise<PicConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PicEdge>>() => T;
  aggregate: <T = AggregatePicPromise>() => T;
}

export interface PicConnectionSubscription
  extends Promise<AsyncIterator<PicConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PicEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePicSubscription>() => T;
}

export interface PicEdge {
  node: Pic;
  cursor: String;
}

export interface PicEdgePromise extends Promise<PicEdge>, Fragmentable {
  node: <T = PicPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PicEdgeSubscription
  extends Promise<AsyncIterator<PicEdge>>,
    Fragmentable {
  node: <T = PicSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePic {
  count: Int;
}

export interface AggregatePicPromise
  extends Promise<AggregatePic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePicSubscription
  extends Promise<AsyncIterator<AggregatePic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RatingConnection {
  pageInfo: PageInfo;
  edges: RatingEdge[];
}

export interface RatingConnectionPromise
  extends Promise<RatingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RatingEdge>>() => T;
  aggregate: <T = AggregateRatingPromise>() => T;
}

export interface RatingConnectionSubscription
  extends Promise<AsyncIterator<RatingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RatingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRatingSubscription>() => T;
}

export interface RatingEdge {
  node: Rating;
  cursor: String;
}

export interface RatingEdgePromise extends Promise<RatingEdge>, Fragmentable {
  node: <T = RatingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RatingEdgeSubscription
  extends Promise<AsyncIterator<RatingEdge>>,
    Fragmentable {
  node: <T = RatingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRating {
  count: Int;
}

export interface AggregateRatingPromise
  extends Promise<AggregateRating>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRatingSubscription
  extends Promise<AsyncIterator<AggregateRating>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BlurbSubscriptionPayload {
  mutation: MutationType;
  node: Blurb;
  updatedFields: String[];
  previousValues: BlurbPreviousValues;
}

export interface BlurbSubscriptionPayloadPromise
  extends Promise<BlurbSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BlurbPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BlurbPreviousValuesPromise>() => T;
}

export interface BlurbSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BlurbSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BlurbSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BlurbPreviousValuesSubscription>() => T;
}

export interface BlurbPreviousValues {
  id: ID_Output;
  text: String;
}

export interface BlurbPreviousValuesPromise
  extends Promise<BlurbPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
}

export interface BlurbPreviousValuesSubscription
  extends Promise<AsyncIterator<BlurbPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface FeedbackSubscriptionPayload {
  mutation: MutationType;
  node: Feedback;
  updatedFields: String[];
  previousValues: FeedbackPreviousValues;
}

export interface FeedbackSubscriptionPayloadPromise
  extends Promise<FeedbackSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FeedbackPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FeedbackPreviousValuesPromise>() => T;
}

export interface FeedbackSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FeedbackSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FeedbackSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FeedbackPreviousValuesSubscription>() => T;
}

export interface FeedbackPreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  flagged: Boolean;
}

export interface FeedbackPreviousValuesPromise
  extends Promise<FeedbackPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  flagged: () => Promise<Boolean>;
}

export interface FeedbackPreviousValuesSubscription
  extends Promise<AsyncIterator<FeedbackPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  flagged: () => Promise<AsyncIterator<Boolean>>;
}

export interface PicSubscriptionPayload {
  mutation: MutationType;
  node: Pic;
  updatedFields: String[];
  previousValues: PicPreviousValues;
}

export interface PicSubscriptionPayloadPromise
  extends Promise<PicSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PicPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PicPreviousValuesPromise>() => T;
}

export interface PicSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PicSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PicSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PicPreviousValuesSubscription>() => T;
}

export interface PicPreviousValues {
  id: ID_Output;
  url: String;
}

export interface PicPreviousValuesPromise
  extends Promise<PicPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
}

export interface PicPreviousValuesSubscription
  extends Promise<AsyncIterator<PicPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface RatingSubscriptionPayload {
  mutation: MutationType;
  node: Rating;
  updatedFields: String[];
  previousValues: RatingPreviousValues;
}

export interface RatingSubscriptionPayloadPromise
  extends Promise<RatingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RatingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RatingPreviousValuesPromise>() => T;
}

export interface RatingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RatingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RatingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RatingPreviousValuesSubscription>() => T;
}

export interface RatingPreviousValues {
  id: ID_Output;
  score: Int;
}

export interface RatingPreviousValuesPromise
  extends Promise<RatingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  score: () => Promise<Int>;
}

export interface RatingPreviousValuesSubscription
  extends Promise<AsyncIterator<RatingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  score: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  birthMonth: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  birthMonth: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  birthMonth: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Blurb",
    embedded: false
  },
  {
    name: "Pic",
    embedded: false
  },
  {
    name: "Rating",
    embedded: false
  },
  {
    name: "Feedback",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
