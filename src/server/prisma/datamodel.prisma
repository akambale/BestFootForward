type User {
  id: ID! @id
  firstName: String 
  lastName: String 
  email: String! @unique
  password: String!
  blurbs: [Blurb!]!
  pics: [Pic!]!
  feedbackReceived: [Feedback!]! @relation(name: "Recieve")
  feedbackGiven: [Feedback!]! @relation(name: "Give")
  feedbackFlagged: [Feedback!]! @relation(name: "Flag")
  birthday: String!
  maxAge: Int!
  minAge: Int!
  genderIdentity: Gender! @relation(name: "Identity", link: TABLE)
  genderPreference: Gender! @relation(name: "Preference", link: TABLE)
}

type Gender {
  id: ID! @id
  male: Boolean!
  female: Boolean!
  nonBi: Boolean!
  identityOwner: User @relation(name: "Identity")
  preferenceOwner: User @relation(name: "Preference")
}

type Blurb {
  id: ID! @id
  owner: User!
  text: String!
  ratings: [Rating!]!
}

type Pic {
  id: ID! @id
  owner: User!
  url: String!
  ratings: [Rating!]!
}

type Rating {
  id: ID! @id
  pic: Pic
  blurb: Blurb
  score: Int!
  ratingGiverAge: Int!
  ratingGiver: User!
  # copying the rating giver's age in this type because age will change over time
  # User gender is less likely to change, so its' ok to query it from the user
}

type Feedback {
  id: ID! @id
  text: String!
  createdAt: DateTime! @createdAt
  flagged: Boolean!
  flaggedBy: User @relation(name: "Flag")
  feedbackReceiver: User! @relation(name: "Recieve")
  feedbackGiver: User! @relation(name: "Give")
}